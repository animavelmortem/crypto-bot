from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes, ConversationHandler

ASK_DEPOSIT, ASK_AGE, ASK_EXPERIENCE, ASK_GOAL = range(4)

ADMIN_ID = 7427253214
ADMIN_USERNAME = "Trading_Radar_Admin"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data='start_survey')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    await update.message.reply_text(
        "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –∫—Ä–∏–ø—Ç—ã –∏ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞!\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É, —á—Ç–æ–±—ã —è –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞–ª –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é.",
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'start_survey':
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        await query.message.delete()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å - –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        await query.message.chat.send_message("üí¨ –î–ª—è –Ω–∞—á–∞–ª–∞ ‚Äî —Ä–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫–æ–π —É —Ç–µ–±—è –¥–µ–ø–æ–∑–∏—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏?")
        return ASK_DEPOSIT

async def ask_deposit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['deposit'] = update.message.text
    await update.message.reply_text("üìÖ –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    return ASK_AGE

async def ask_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['age'] = update.message.text
    await update.message.reply_text("üìà –ö–∞–∫ –¥–∞–≤–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—à—å—Å—è —Ç—Ä–µ–π–¥–∏–Ω–≥–æ–º?")
    return ASK_EXPERIENCE

async def ask_experience(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['experience'] = update.message.text
    await update.message.reply_text("üéØ –ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å –≤ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ?")
    return ASK_GOAL

async def finish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['goal'] = update.message.text

    profile = (
        f"üìå –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç!\n"
        f"üë§ –ò–º—è: {update.message.from_user.full_name}\n"
        f"üÜî @{update.message.from_user.username}\n"
        f"üí∞ –î–µ–ø–æ–∑–∏—Ç: {context.user_data['deposit']}\n"
        f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {context.user_data['age']}\n"
        f"üìà –û–ø—ã—Ç: {context.user_data['experience']}\n"
        f"üéØ –¶–µ–ª—å: {context.user_data['goal']}"
    )

    await context.bot.send_message(chat_id=ADMIN_ID, text=profile)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/+LjoBlLMpuIkzMDdi")],
        [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É", url=f"https://t.me/{ADMIN_USERNAME}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "‚úÖ –°–ø–∞—Å–∏–±–æ! –Ø –ø–æ–ª—É—á–∏–ª —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É –∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂—É—Å—å —Å —Ç–æ–±–æ–π –ª–∏—á–Ω–æ.\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:",
        reply_markup=reply_markup
    )

    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üö´ –ê–Ω–∫–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token("8038864177:AAETdG9oyMVnfsIAXobEdIO69JL0Nd75UIM").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start), CallbackQueryHandler(button_handler, pattern='start_survey')],
        states={
            ASK_DEPOSIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_deposit)],
            ASK_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_age)],
            ASK_EXPERIENCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_experience)],
            ASK_GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, finish)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    )

    app.add_handler(conv_handler)

    app.run_polling()

if __name__ == '__main__':
    main()
