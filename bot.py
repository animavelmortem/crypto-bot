from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes, ConversationHandler, ChatJoinRequestHandler
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import csv
import logging
import asyncio
import os
import json

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
ASK_DEPOSIT, ASK_AGE, ASK_EXPERIENCE, ASK_BIRGE, ASK_TRADE_EXP, CONFIRM = range(6)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
ADMIN_ID = 7427253214
ADMIN_USERNAME = "Trading_Radar_Admin"
CHANNEL_ID = '-1002409235086'
SPREADSHEET_ID = '1fiVru2r6gAo5i8xiPTG7-RnvG43K4H5zevlk53MqjQs' # ID —Ç–≤–æ–µ–π —Ç–∞–±–ª–∏—Ü—ã
CHANNEL_LINK = 'https://t.me/+LjoBlLMpuIkzMDdi' # –ù–æ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å—Å—ã–ª–∫–∏

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets
scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
credentials_json_string = os.environ.get("GOOGLE_CREDENTIALS")
if credentials_json_string:
    try:
        credentials_json = json.loads(credentials_json_string)
        creds = ServiceAccountCredentials.from_json_keyfile_dict(credentials_json, scope)
        client = gspread.authorize(creds)
        sheet = client.open_by_key(SPREADSHEET_ID).sheet1
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–ª—é—á–µ–π Google Sheets –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
        client = None
else:
    logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è GOOGLE_CREDENTIALS –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    client = None

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
existing_users = set()

async def load_existing_users():
    if not client:
        logger.error("Google Sheets –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    try:
        records = sheet.get_all_values()
        for row in records[1:]:
            existing_users.add(row[0])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Google Sheets: {e}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def check_subscription(context: ContextTypes.DEFAULT_TYPE, user_id: int) -> bool:
    try:
        member = await context.bot.get_chat_member(CHANNEL_ID, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

# –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–†–ò–ù–Ø–¢–ò–Ø –ó–ê–Ø–í–û–ö –ù–ê –í–°–¢–£–ü–õ–ï–ù–ò–ï
async def handle_join_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä—è–µ—Ç –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª."""
    user = update.chat_join_request.from_user
    chat = update.chat_join_request.chat

    await context.bot.approve_chat_join_request(chat_id=chat.id, user_id=user.id)
    logger.info(f"–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.full_name} (@{user.username}) –≤ –∫–∞–Ω–∞–ª {chat.title} –æ–¥–æ–±—Ä–µ–Ω–∞.")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    await load_existing_users()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø–æ–ª–Ω—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–Ω–∫–µ—Ç—É
    if user_id in existing_users:
        keyboard = [
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data='edit_survey')],
            [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É", url=f"https://t.me/{ADMIN_USERNAME}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–í—ã —É–∂–µ –∑–∞–ø–æ–ª–Ω—è–ª–∏ –∞–Ω–∫–µ—Ç—É. –•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º?",
            reply_markup=reply_markup
        )
        return ConversationHandler.END

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    checking_message = await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–ø–∏—Å–∫—É...")
    await asyncio.sleep(1)
    if await check_subscription(context, update.message.from_user.id):
        await checking_message.delete()
        keyboard = [
            [InlineKeyboardButton("üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data='start_survey')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –∫—Ä–∏–ø—Ç—ã –∏ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞!\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É, —á—Ç–æ–±—ã —è –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞–ª –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é.",
            reply_markup=reply_markup
        )
    else:
        await checking_message.delete()
        keyboard = [
            [InlineKeyboardButton("üìå –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)],
            [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='check_subscription')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üö´ –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
            reply_markup=reply_markup
        )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = str(query.from_user.id)
    if query.data == 'check_subscription':
        checking_message = await query.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–ø–∏—Å–∫—É...")
        await asyncio.sleep(1)
        if await check_subscription(context, query.from_user.id):
            await checking_message.delete()
            await query.message.reply_text("üí¨ –í–æ–ø—Ä–æ—Å 1/5: –ö–∞–∫–æ–π —É —Ç–µ–±—è –¥–µ–ø–æ–∑–∏—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏? (–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 1000 USD)")
            return ASK_DEPOSIT
        else:
            await checking_message.delete()
            keyboard = [
                [InlineKeyboardButton("üìå –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)],
                [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='check_subscription')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text("üö´ –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=reply_markup)

    elif query.data in ['start_survey', 'edit_survey']:
        await load_existing_users()
        if query.data == 'start_survey' and user_id in existing_users:
            keyboard = [
                [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data='edit_survey')],
                [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É", url=f"https://t.me/{ADMIN_USERNAME}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text(
                "–í—ã —É–∂–µ –∑–∞–ø–æ–ª–Ω—è–ª–∏ –∞–Ω–∫–µ—Ç—É. –•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º?",
                reply_markup=reply_markup
            )
            return ConversationHandler.END
        await query.message.delete()
        await query.message.chat.send_message("üí¨ –í–æ–ø—Ä–æ—Å 1/5: –ö–∞–∫–æ–π —É —Ç–µ–±—è –¥–µ–ø–æ–∑–∏—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏? (–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 1000 USD)")
        return ASK_DEPOSIT

    elif query.data == 'confirm_data':
        await save_data(update, context, user_id, query.from_user)
        keyboard = [
            [InlineKeyboardButton("üìå –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)],
            [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É", url=f"https://t.me/{ADMIN_USERNAME}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ! –Ø –ø–æ–ª—É—á–∏–ª —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É –∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂—É—Å—å —Å —Ç–æ–±–æ–π –ª–∏—á–Ω–æ.\n"
            "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:",
            reply_markup=reply_markup
        )
        return ConversationHandler.END

    elif query.data == 'edit_data':
        await query.message.delete()
        await query.message.chat.send_message("üí¨ –í–æ–ø—Ä–æ—Å 1/5: –ö–∞–∫–æ–π —É —Ç–µ–±—è –¥–µ–ø–æ–∑–∏—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏? (–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 1000 USD)")
        return ASK_DEPOSIT

async def ask_deposit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    try:
        deposit = float(''.join(c for c in text if c.isdigit() or c == '.'))
        if deposit <= 0:
            raise ValueError
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1000 –∏–ª–∏ 500 USD).")
        return ASK_DEPOSIT

    context.user_data['deposit'] = text
    await update.message.reply_text("üìÖ –í–æ–ø—Ä–æ—Å 2/5: –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? (–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 25)")
    return ASK_AGE

async def ask_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if not text.isdigit() or int(text) < 18:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º (–Ω–µ –º–µ–Ω–µ–µ 18 –ª–µ—Ç).")
        return ASK_AGE

    context.user_data['age'] = text
    await update.message.reply_text("üìà –í–æ–ø—Ä–æ—Å 3/5: –ö–∞–∫ –¥–∞–≤–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—à—å—Å—è —Ç—Ä–µ–π–¥–∏–Ω–≥–æ–º?")
    return ASK_EXPERIENCE

async def ask_experience(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['experience'] = update.message.text
    await update.message.reply_text("üè¶ –í–æ–ø—Ä–æ—Å 4/5: –ù–∞ –∫–∞–∫–æ–π –±–∏—Ä–∂–µ —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è —Ç–æ—Ä–≥–æ–≤–∞—Ç—å? (–ù–∞–ø—Ä–∏–º–µ—Ä, Binance, Bybit)")
    return ASK_BIRGE

async def ask_birge(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['birge'] = update.message.text
    await update.message.reply_text("üíπ –í–æ–ø—Ä–æ—Å 5/5: –ö–∞–∫–æ–π —É —Ç–µ–±—è –æ–ø—ã—Ç –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ? (–ù–∞–ø—Ä–∏–º–µ—Ä, '–¢–æ—Ä–≥–æ–≤–∞–ª 1 –≥–æ–¥ –Ω–∞ Binance' –∏–ª–∏ '–ù–æ–≤–∏—á–æ–∫')")
    return ASK_TRADE_EXP

async def ask_trade_exp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['trade_exp'] = update.message.text

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    profile = (
        f"üìå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:\n"
        f"üë§ –ò–º—è: {update.message.from_user.full_name}\n"
        f"üÜî @{update.message.from_user.username or 'unknown'}\n"
        f"üí∞ –î–µ–ø–æ–∑–∏—Ç: {context.user_data['deposit']}\n"
        f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {context.user_data['age']}\n"
        f"üìà –ò–Ω—Ç–µ—Ä–µ—Å –∫ —Ç—Ä–µ–π–¥–∏–Ω–≥—É: {context.user_data['experience']}\n"
        f"üè¶ –ë–∏—Ä–∂–∞: {context.user_data['birge']}\n"
        f"üíπ –û–ø—ã—Ç —Ç–æ—Ä–≥–æ–≤–ª–∏: {context.user_data['trade_exp']}"
    )
    keyboard = [
        [InlineKeyboardButton("‚úÖ –í–µ—Ä–Ω–æ", callback_data='confirm_data')],
        [InlineKeyboardButton("‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å", callback_data='edit_data')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(profile, reply_markup=reply_markup)
    return CONFIRM

async def save_data(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: str, user):
    profile = (
        f"üìå –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç!\n"
        f"üë§ –ò–º—è: {user.full_name}\n"
        f"üÜî @{user.username or 'unknown'}\n"
        f"üí∞ –î–µ–ø–æ–∑–∏—Ç: {context.user_data['deposit']}\n"
        f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {context.user_data['age']}\n"
        f"üìà –ò–Ω—Ç–µ—Ä–µ—Å –∫ —Ç—Ä–µ–π–¥–∏–Ω–≥—É: {context.user_data['experience']}\n"
        f"üè¶ –ë–∏—Ä–∂–∞: {context.user_data['birge']}\n"
        f"üíπ –û–ø—ã—Ç —Ç–æ—Ä–≥–æ–≤–ª–∏: {context.user_data['trade_exp']}"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
    try:
        await context.bot.send_message(chat_id=ADMIN_ID, text=profile)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Google Sheets
    if not client:
        logger.error("Google Sheets –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ.")
        return
    try:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ —Å—Ç—Ä–æ–∫—É
        records = sheet.get_all_values()
        for i, row in enumerate(records[1:], 2):
            if row[0] == user_id:
                sheet.update(f'A{i}:G{i}', [[
                    user_id,
                    user.username or 'unknown',
                    context.user_data['deposit'],
                    context.user_data['age'],
                    context.user_data['experience'],
                    context.user_data['birge'],
                    context.user_data['trade_exp']
                ]])
                break
        else:
            # –ï—Å–ª–∏ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
            sheet.append_row([
                user_id,
                user.username or 'unknown',
                context.user_data['deposit'],
                context.user_data['age'],
                context.user_data['experience'],
                context.user_data['birge'],
                context.user_data['trade_exp']
            ])
            existing_users.add(user_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google Sheets: {e}")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CSV
    try:
        with open('users.csv', 'a', newline='') as file:
            writer = csv.writer(file)
            writer.writerow([
                user_id,
                user.username or 'unknown',
                context.user_data['deposit'],
                context.user_data['age'],
                context.user_data['experience'],
                context.user_data['birge'],
                context.user_data['trade_exp']
            ])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ CSV: {e}")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üö´ –ê–Ω–∫–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

def main():
    bot_token = os.environ.get("TELEGRAM_TOKEN")
    if not bot_token:
        raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è 'TELEGRAM_TOKEN' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

    app = ApplicationBuilder().token(bot_token).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
    app.add_handler(ChatJoinRequestHandler(callback=handle_join_request))

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start), CallbackQueryHandler(button_handler, pattern='start_survey|check_subscription|edit_survey|confirm_data|edit_data')],
        states={
            ASK_DEPOSIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_deposit)],
            ASK_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_age)],
            ASK_EXPERIENCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_experience)],
            ASK_BIRGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_birge)],
            ASK_TRADE_EXP: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_trade_exp)],
            CONFIRM: [CallbackQueryHandler(button_handler, pattern='confirm_data|edit_data')]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    )

    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == '__main__':
    main()
